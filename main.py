from fastapi import FastAPI, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from typing import List
from ultralytics import YOLO
import shutil
import uuid
import os
import json  # üëà ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á dictionary ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢

app = FastAPI()

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ Flutter
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = YOLO("best.pt")  # ‡πÅ‡∏Å‡πâ path ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏∏‡∏ì

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
os.makedirs("temp_images", exist_ok=True)

@app.post("/analyze/")
async def analyze_images(files: List[UploadFile] = File(...)):
    results = []

    for file in files:
        # 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏•‡∏á temp
        image_id = str(uuid.uuid4())
        image_path = f"temp_images/{image_id}_{file.filename}"
        with open(image_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        # 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•
        prediction = model(image_path)[0]

        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
        image_data = {
            "filename": file.filename,
            "detections": [],
            "acne_count_by_type": {},
            "total_acne_count": 0,
        }

        for box in prediction.boxes.data.tolist():
            x1, y1, x2, y2, conf, cls_id = box
            class_name = model.names[int(cls_id)]

            detection = {
                "class": class_name,
                "confidence": round(conf, 2),
                "box": [round(x1), round(y1), round(x2), round(y2)],
            }

            image_data["detections"].append(detection)
            image_data["acne_count_by_type"][class_name] = image_data["acne_count_by_type"].get(class_name, 0) + 1
            image_data["total_acne_count"] += 1

        results.append(image_data)

        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à
        os.remove(image_path)

    # ‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå JSON ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
    print("üîç JSON response:")
    print(json.dumps({"results": results}, indent=2))

    return {"results": results}
